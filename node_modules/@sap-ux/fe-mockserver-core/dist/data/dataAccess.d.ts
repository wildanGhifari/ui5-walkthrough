import type { ODataMetadata } from './metadata';
import { MockDataEntitySet } from './entitySets/entitySet';
import { StickyMockEntitySet } from './entitySets/stickyEntitySet';
import type { EntitySet, EntityType, Singleton } from '@sap-ux/vocabularies-types';
import type { ILogger } from '@ui5/logger';
import type { DataAccessInterface, EntitySetInterface } from './common';
import type { KeyDefinitions } from '../mockdata/fileBasedMockData';
import type { ServiceConfig } from '../api';
import type { IFileLoader } from '../index';
import ODataRequest from '../request/odataRequest';
import type { ExpandDefinition } from '../request/odataRequest';
/**
 *
 */
export declare class DataAccess implements DataAccessInterface {
    private service;
    private metadata;
    fileLoader: IFileLoader;
    protected readonly mockDataRootFolder: string;
    debug: boolean;
    log: ILogger;
    protected readonly strictKeyMode: boolean;
    protected readonly contextBasedIsolation: boolean;
    protected entitySets: Record<string, MockDataEntitySet>;
    protected stickyEntitySets: StickyMockEntitySet[];
    protected generateMockData: boolean;
    constructor(service: ServiceConfig, metadata: ODataMetadata, fileLoader: IFileLoader);
    isV4(): boolean;
    private initializeMockData;
    reloadData(newMetadata?: ODataMetadata): void;
    getMockEntitySet(entityTypeName?: string, generateMockData?: boolean, containedEntityType?: EntityType, containedData?: any): Promise<EntitySetInterface>;
    performAction(odataRequest: ODataRequest, actionData?: object): Promise<any>;
    getNavigationPropertyKeys(data: any, navPropDetail: any, currentEntityType: EntityType, currentEntitySet: EntitySet | Singleton | undefined, currentKeys: Record<string, string>, forCreate?: boolean): Record<string, string>;
    getExpandData(currentEntitySet: EntitySet | Singleton | undefined, entityType: EntityType, expandNavProp: string, data: any, requestExpandObject: Record<string, ExpandDefinition>, tenantId: string, previousEntitySet: EntitySet | Singleton | undefined, visitedPaths: string[], odataRequest: ODataRequest): Promise<any>;
    getMetadata(): ODataMetadata;
    private apply$Select;
    getData(odataRequest: ODataRequest, dontClone?: boolean): Promise<any>;
    updateData(odataRequest: ODataRequest, patchData: any): Promise<any>;
    createData(odataRequest: ODataRequest, postData: any): Promise<any>;
    deleteData(odataRequest: ODataRequest): Promise<void>;
    getDraftRoot(keyValues: KeyDefinitions, _tenantId: string, entitySetDefinition: EntitySet): Promise<{}>;
    resetStickySessionTimeout(odataRequest: ODataRequest, tenantId: string): void;
}
//# sourceMappingURL=dataAccess.d.ts.map