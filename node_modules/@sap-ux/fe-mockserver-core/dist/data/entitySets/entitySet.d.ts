import type ODataRequest from '../../request/odataRequest';
import type { KeyDefinitions } from '../../mockdata/fileBasedMockData';
import type { DataAccessInterface, EntitySetInterface } from '../common';
import type { Action, EntitySet, EntityType, Property } from '@sap-ux/vocabularies-types';
import { FileBasedMockData } from '../../mockdata/fileBasedMockData';
import type { FilterMethodCall } from '../../request/filterParser';
type PreparedFunction = {
    fn: Function;
    type: string;
};
/**
 *
 */
export declare class MockDataEntitySet implements EntitySetInterface {
    static read(mockDataRootFolder: string, entity: string, generateMockData: boolean, isDraft: boolean, dataAccess: DataAccessInterface): Promise<object[]>;
    protected _rootMockData: object[];
    private _rootMockDataFn;
    protected contextBasedMockData: Record<string, FileBasedMockData>;
    readyPromise: Promise<EntitySetInterface>;
    protected entitySetDefinition: EntitySet | null;
    protected entityTypeDefinition: EntityType;
    protected dataAccess: DataAccessInterface;
    /**
     * @param rootFolder
     * @param entitySetDefinition
     * @param dataAccess
     * @param generateMockData
     * @param initializeMockData
     * @param isDraft
     */
    constructor(rootFolder: string, entitySetDefinition: EntitySet | EntityType, dataAccess: DataAccessInterface, generateMockData: boolean, initializeMockData?: boolean, isDraft?: boolean);
    getMockData(contextId: string): FileBasedMockData;
    protected checkKeys(keyValues: KeyDefinitions, dataLine: object, keyDefinition: Property[]): boolean;
    protected checkSpecificProperties(_filterExpression: any, _mockData: any, _allData: any, _odataRequest: any): boolean | null;
    isV4(): boolean;
    getProperty(identifier: string): any;
    checkFilter(mockData: object, filterExpression: any, tenantId: string, odataRequest: ODataRequest): boolean;
    createTransformation(identifier: string | FilterMethodCall): PreparedFunction;
    checkSimpleExpression(filterExpression: any, mockData: any, tenantId: string, odataRequest: ODataRequest): boolean;
    private checkLambdaExpression;
    checkSearch(mockData: any, searchQueries: string[], _odataRequest: ODataRequest): boolean;
    checkKeyValue(mockData: any, keyValues: any, keyName: string, keyProp?: Property): boolean;
    getKeys(dataLine: any): Record<string, string | number | boolean>;
    protected prepareKeys(keyValues: KeyDefinitions): KeyDefinitions;
    performGET(keyValues: KeyDefinitions, asArray: boolean, tenantId: string, odataRequest: ODataRequest, dontClone?: boolean): any;
    performPOST(keyValues: KeyDefinitions, postData: any, tenantId: string, odataRequest: ODataRequest, _updateParent?: boolean): Promise<any>;
    performPATCH(keyValues: KeyDefinitions, patchData: object, tenantId: string, odataRequest: ODataRequest, _updateParent?: boolean): Promise<any>;
    performDELETE(keyValues: KeyDefinitions, tenantId: string, odataRequest: ODataRequest, _updateParent?: boolean): Promise<void>;
    executeAction(actionDefinition: Action, actionData: object | undefined, odataRequest: ODataRequest, keys: Record<string, any>): Promise<any>;
    getParentEntityInterface(tenantId: string): Promise<FileBasedMockData>;
    getEntityInterface(entitySet: string, tenantId: string): Promise<FileBasedMockData>;
}
export {};
//# sourceMappingURL=entitySet.d.ts.map