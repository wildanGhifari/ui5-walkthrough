"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockMiddleware = void 0;
const router_1 = __importDefault(require("router"));
const logger_1 = require("@ui5/logger");
const serviceRouter_1 = require("./router/serviceRouter");
const catalogServiceRouter_1 = require("./router/catalogServiceRouter");
const dataAccess_1 = require("./data/dataAccess");
const etag_1 = __importDefault(require("etag"));
const metadata_1 = require("./data/metadata");
/**
 * Small middleware to disable the cache on the queries for the mockserver.
 *
 * @param _req
 * @param res
 * @param next
 */
function disableCache(_req, res, next) {
    res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');
    res.setHeader('Expires', '-1');
    res.setHeader('Pragma', 'no-cache');
    next();
}
/**
 * Escape the path provided for the annotation URL so that they can fit the regex pattern from Router.
 *
 * @param strValue
 * @returns the encoded string
 */
function escapeRegex(strValue) {
    return strValue.replace(/[-\\^$+?()|[\]{}]/g, '\\$&');
}
/**
 * Encore single quote as string element so that they cna be matched as well.
 *
 * @param str
 * @returns the encoded string
 */
function encode(str) {
    return str.replace(/'/g, '%27');
}
async function loadMetadata(service, metadataProcessor) {
    const edmx = await metadataProcessor.loadMetadata(service.metadataPath);
    if (!service.noETag) {
        service.ETag = (0, etag_1.default)(edmx, { weak: true });
    }
    return metadata_1.ODataMetadata.parse(edmx, service.urlPath + '/$metadata', service.ETag);
}
function prepareCatalogAndAnnotation(app, newConfig, fileLoader) {
    // Prepare the catalog service
    app.use('/sap/opu/odata/IWFND/CATALOGSERVICE;v=2', (0, catalogServiceRouter_1.catalogServiceRouter)(newConfig.services));
    // Prepare the annotation files
    for (const mockAnnotation of newConfig.annotations || []) {
        const escapedPath = escapeRegex(mockAnnotation.urlPath);
        app.get(escapedPath, async (_req, res) => {
            try {
                const data = await fileLoader.loadFile(mockAnnotation.localPath);
                res.setHeader('Content-Type', 'application/xml');
                res.write(data);
                res.end();
            }
            catch (error) {
                console.error(error);
            }
        });
    }
}
/**
 * Creates and configure the different middleware for each mocked service.
 *
 * @param newConfig
 * @param app
 * @param fileLoader
 * @param metadataProcessor
 */
async function createMockMiddleware(newConfig, app, fileLoader, metadataProcessor) {
    const log = (0, logger_1.getLogger)('server:ux-fe-mockserver');
    app.use(disableCache);
    const oDataHandlerPromises = newConfig.services.map(async (mockServiceIn) => {
        const mockService = mockServiceIn;
        const splittedPath = mockService.urlPath.split('/');
        mockService._internalName = splittedPath[splittedPath.length - 1];
        if (mockService.watch) {
            log.info(`Service ${mockService.urlPath} is running in watch mode`);
        }
        try {
            let metadata = await loadMetadata(mockService, metadataProcessor);
            const dataAccess = new dataAccess_1.DataAccess(mockService, metadata, fileLoader);
            if (mockService.watch) {
                const watchPath = [mockService.mockdataPath];
                if (mockService.metadataPath) {
                    watchPath.push(mockService.metadataPath);
                }
                const chokidar = await Promise.resolve().then(() => __importStar(require('chokidar')));
                chokidar
                    .watch(watchPath, {
                    ignoreInitial: true
                })
                    .on('all', async function (event, path) {
                    log.info(`Change detected for service ${mockService.urlPath}... restarting`);
                    if (mockService.debug) {
                        log.info(`${event} on ${path}`);
                    }
                    metadata = await loadMetadata(mockService, metadataProcessor);
                    dataAccess.reloadData(metadata);
                    log.info(`Service ${mockService.urlPath} restarted`);
                });
            }
            const oDataHandlerInstance = await (0, serviceRouter_1.serviceRouter)(mockService, dataAccess);
            if (mockService.contextBasedIsolation || newConfig.contextBasedIsolation) {
                const subRouter = new router_1.default();
                subRouter.use(`${mockService.urlPath}`, oDataHandlerInstance);
                subRouter.use(`${encode(mockService.urlPath)}`, oDataHandlerInstance);
                app.use(/^\/tenant-(\d{1,3})/, subRouter);
            }
            if (mockService.debug) {
                log.info(`Mockdata location: ${mockService.mockdataPath}`);
                log.info(`Service path: ${mockService.urlPath}`);
            }
            app.use(`${mockService.urlPath}`, oDataHandlerInstance);
            app.use(`${encode(mockService.urlPath)}`, oDataHandlerInstance);
        }
        catch (e) {
            log.error(e);
            throw new Error('Failed to start ' + JSON.stringify(mockService, null, 4));
        }
    });
    prepareCatalogAndAnnotation(app, newConfig, fileLoader);
    await Promise.all(oDataHandlerPromises);
}
exports.createMockMiddleware = createMockMiddleware;
//# sourceMappingURL=middleware.js.map