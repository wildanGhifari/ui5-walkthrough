"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceRouter = void 0;
const router_1 = __importDefault(require("router"));
const logger_1 = require("@ui5/logger");
const body_parser_1 = require("body-parser");
const batchRouter_1 = require("./batchRouter");
const odataRequest_1 = __importDefault(require("../request/odataRequest"));
const url_1 = require("url");
/**
 * Checks if a CSRF Token is requested and adds it to the header if so
 *
 * UI5 may user both methods HEAD or GET with the service document url to fetch
 * the token.
 *
 * @param _req IncomingMessage
 * @param res ServerResponse
 */
const addCSRFTokenIfRequested = (_req, res) => {
    if (_req.headers['X-CSRF-Token'.toLowerCase()] === 'Fetch') {
        res.setHeader('X-CSRF-Token', '0504-71383');
    }
};
/**
 * Creates the sub router containing the odata protocol processing.
 *
 * @param service
 * @param dataAccess
 * @returns the sub router specific to that odata query
 */
async function serviceRouter(service, dataAccess) {
    const router = new router_1.default();
    const log = (0, logger_1.getLogger)('server:ux-fe-mockserver');
    router.head('/', (_req, res, next) => {
        addCSRFTokenIfRequested(_req, res); //HEAD use case
        next();
    });
    // Deal with the $metadata support
    router.get('/\\$metadata', (_req, res) => {
        res.setHeader('Content-Type', 'application/xml');
        if (service.ETag) {
            res.setHeader('ETag', service.ETag);
        }
        res.write(dataAccess.getMetadata().getEdmx());
        res.end();
    });
    router.post('/\\$metadata/reload', (_req, res) => {
        dataAccess.reloadData();
        res.setHeader('Content-Type', 'application/json');
        res.write(JSON.stringify({ message: 'Reload success' }));
        res.end();
    });
    router.get('/', (_req, res) => {
        const data = `<?xml version="1.0" encoding="utf-8"?>
        <app:service xml:lang="en" xml:base="${service.urlPath}/"
            xmlns:app="http://www.w3.org/2007/app"
            xmlns:atom="http://www.w3.org/2005/Atom"
            xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"
            xmlns:sap="http://www.sap.com/Protocols/SAPData">
            <app:workspace>
            </app:workspace>
            <atom:link rel="self" href="${service.urlPath}/"/>
            <atom:link rel="latest-version" href="${service.urlPath}/"/>
        </app:service>`;
        res.setHeader('Content-Type', 'application/xml');
        addCSRFTokenIfRequested(_req, res); //GET use case
        res.write(data);
        res.end();
    });
    // Standard processing for the incoming message
    router.use((req, res, next) => {
        var _a, _b, _c;
        const parser = (0, body_parser_1.raw)({ type: '*/*' });
        const tenantId = ((_a = req.originalUrl) === null || _a === void 0 ? void 0 : _a.startsWith('/tenant-')) ? (_b = req.originalUrl) === null || _b === void 0 ? void 0 : _b.split('/')[1] : 'tenant-default';
        req.tenantId = tenantId;
        const sapClient = (_c = req.originalUrl) === null || _c === void 0 ? void 0 : _c.includes('sap-client');
        if (sapClient) {
            const parsedUrl = new url_1.URL(`http://dummy${req.originalUrl}`);
            req.tenantId = `tenant-${parsedUrl.searchParams.get('sap-client')}`;
        }
        parser(req, res, function () {
            if (req.body === null ||
                (typeof req.body === 'object' && Object.keys(req.body).length === 0)) {
                req.body = '{}';
            }
            else {
                req.body = req.body.toString('utf-8');
            }
            if (req.headers['content-type'] &&
                req.body &&
                req.headers['content-type'].indexOf('application/json') !== -1) {
                req.body = JSON.parse(req.body);
            }
            next();
        });
    });
    router.use('/\\$batch', (0, batchRouter_1.batchRouter)(dataAccess));
    router.route('/*').all(async (req, res, next) => {
        try {
            const oDataRequest = new odataRequest_1.default({
                url: req.url,
                tenantId: req.tenantId,
                body: req.body,
                headers: req.headers,
                method: req.method
            }, dataAccess);
            await oDataRequest.handleRequest();
            const responseData = oDataRequest.getResponseData();
            res.statusCode = oDataRequest.statusCode;
            for (const responseHeader in oDataRequest.responseHeaders) {
                res.setHeader(responseHeader, oDataRequest.responseHeaders[responseHeader]);
            }
            if (responseData) {
                res.write(responseData);
            }
            res.end();
        }
        catch (e) {
            next(e);
        }
    });
    router.use('*', (err, _req, res, next) => {
        log.error(err);
        if (res.headersSent) {
            return next(err);
        }
        else {
            res.statusCode = 500;
            res.write(err.message);
            res.end();
        }
    });
    return router;
}
exports.serviceRouter = serviceRouter;
//# sourceMappingURL=serviceRouter.js.map