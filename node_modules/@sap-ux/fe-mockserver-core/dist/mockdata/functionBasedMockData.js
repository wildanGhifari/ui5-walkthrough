"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionBasedMockData = void 0;
const fileBasedMockData_1 = require("./fileBasedMockData");
const common_1 = require("../data/common");
/**
 *
 */
class FunctionBasedMockData extends fileBasedMockData_1.FileBasedMockData {
    constructor(mockDataFn, entityType, mockDataEntitySet, contextId) {
        const noMock = [];
        noMock.__generateMockData = true;
        super(((mockDataFn === null || mockDataFn === void 0 ? void 0 : mockDataFn.getInitialDataSet) ? mockDataFn.getInitialDataSet(contextId) : noMock) || noMock, entityType, mockDataEntitySet, contextId);
        this._mockDataFn = mockDataFn;
        this._mockDataFn.base = {
            generateMockData: super.generateMockData.bind(this),
            generateKey: super.generateKey.bind(this),
            addEntry: (postData) => {
                this._entityType.keys.forEach((keyProp) => {
                    if (postData[keyProp.name] === undefined || postData[keyProp.name].length === 0) {
                        // Missing key
                        if (keyProp.name === 'IsActiveEntity') {
                            postData['IsActiveEntity'] = false;
                        }
                        else {
                            postData[keyProp.name] = super.generateKey(keyProp);
                        }
                    }
                });
                let newObject = super.getEmptyObject({});
                newObject = Object.assign(newObject, postData);
                return super.addEntry(newObject, {});
            },
            updateEntry: (keyValues, patchData, odataRequest) => {
                const data = this.fetchEntries(keyValues, odataRequest)[0];
                const updatedData = Object.assign(data, patchData);
                return super.updateEntry(keyValues, updatedData, patchData, odataRequest);
            },
            removeEntry: super.removeEntry.bind(this),
            fetchEntries: super.fetchEntries.bind(this),
            hasEntry: super.hasEntry.bind(this),
            hasEntries: super.hasEntries.bind(this),
            getAllEntries: super.getAllEntries.bind(this),
            getEmptyObject: super.getEmptyObject.bind(this),
            getDefaultElement: super.getDefaultElement.bind(this),
            getParentEntityInterface: super.getParentEntityInterface.bind(this),
            getEntityInterface: super.getEntityInterface.bind(this),
            checkFilterValue: super.checkFilterValue.bind(this),
            checkSearchQuery: super.checkSearchQuery.bind(this)
        };
        this._mockDataFn.throwError = function (message, statusCode = 500, messageData, isSAPMessage = false, headers = {}) {
            throw new common_1.ExecutionError(message, statusCode, messageData, isSAPMessage, headers);
        };
    }
    async addEntry(mockEntry, odataRequest) {
        if (this._mockDataFn.addEntry) {
            return this._mockDataFn.addEntry(mockEntry, odataRequest);
        }
        return super.addEntry(mockEntry, odataRequest);
    }
    async updateEntry(keyValues, updatedData, patchData, odataRequest) {
        if (this._mockDataFn.updateEntry) {
            return this._mockDataFn.updateEntry(keyValues, updatedData, patchData, odataRequest);
        }
        return super.updateEntry(keyValues, updatedData, patchData, odataRequest);
    }
    async removeEntry(keyValues, odataRequest) {
        if (this._mockDataFn.removeEntry) {
            return this._mockDataFn.removeEntry(keyValues, odataRequest);
        }
        return super.removeEntry(keyValues, odataRequest);
    }
    fetchEntries(keyValues, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.fetchEntries) {
            return this._mockDataFn.fetchEntries(keyValues, odataRequest);
        }
        else {
            return super.fetchEntries(keyValues, odataRequest);
        }
    }
    hasEntry(keyValues, odataRequest) {
        if (this._mockDataFn.hasEntry) {
            return this._mockDataFn.hasEntry(keyValues, odataRequest);
        }
        return super.hasEntry(keyValues, odataRequest);
    }
    hasEntries(odataRequest) {
        if (this._mockDataFn.hasEntries) {
            return this._mockDataFn.hasEntries(odataRequest);
        }
        return super.hasEntries(odataRequest);
    }
    getEmptyObject(odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.getEmptyObject) {
            return this._mockDataFn.getEmptyObject(odataRequest);
        }
        else {
            return super.getEmptyObject(odataRequest);
        }
    }
    getDefaultElement(odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.getDefaultElement) {
            return this._mockDataFn.getDefaultElement(odataRequest);
        }
        else {
            return super.getDefaultElement(odataRequest);
        }
    }
    generateKey(property, lineIndex, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.generateKey) {
            return this._mockDataFn.generateKey(property, lineIndex, odataRequest);
        }
        else {
            return super.generateKey(property, lineIndex, odataRequest);
        }
    }
    getAllEntries(odataRequest, dontClone = false) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.getAllEntries) {
            return this._mockDataFn.getAllEntries(odataRequest);
        }
        else {
            return super.getAllEntries(odataRequest, dontClone);
        }
    }
    async onBeforeAction(actionDefinition, actionData, keys, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onBeforeAction) {
            return this._mockDataFn.onBeforeAction(actionDefinition, actionData, keys, odataRequest);
        }
        else {
            return super.onBeforeAction(actionDefinition, actionData, keys, odataRequest);
        }
    }
    async executeAction(actionDefinition, actionData, keys, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.executeAction) {
            return this._mockDataFn.executeAction(actionDefinition, actionData, keys, odataRequest);
        }
        else {
            return super.executeAction(actionDefinition, actionData, keys, odataRequest);
        }
    }
    async onAfterAction(actionDefinition, actionData, keys, responseData, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onAfterAction) {
            return this._mockDataFn.onAfterAction(actionDefinition, actionData, keys, responseData, odataRequest);
        }
        else {
            return super.onAfterAction(actionDefinition, actionData, keys, responseData, odataRequest);
        }
    }
    async onAfterUpdateEntry(keyValues, updatedData, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onAfterUpdateEntry) {
            return this._mockDataFn.onAfterUpdateEntry(keyValues, updatedData, odataRequest);
        }
        else {
            return super.onAfterUpdateEntry(keyValues, updatedData, odataRequest);
        }
    }
    async onBeforeUpdateEntry(keyValues, updatedData, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onBeforeUpdateEntry) {
            return this._mockDataFn.onBeforeUpdateEntry(keyValues, updatedData, odataRequest);
        }
        else {
            return super.onBeforeUpdateEntry(keyValues, updatedData, odataRequest);
        }
    }
    hasCustomAggregate(customAggregateName, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.hasCustomAggregate) {
            return this._mockDataFn.hasCustomAggregate(customAggregateName, odataRequest);
        }
        else {
            return super.hasCustomAggregate(customAggregateName, odataRequest);
        }
    }
    performCustomAggregate(customAggregateName, dataToAggregate, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.performCustomAggregate) {
            return this._mockDataFn.performCustomAggregate(customAggregateName, dataToAggregate, odataRequest);
        }
        else {
            return super.performCustomAggregate(customAggregateName, dataToAggregate, odataRequest);
        }
    }
    checkSearchQuery(mockValue, searchQuery, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.checkSearchQuery) {
            return this._mockDataFn.checkSearchQuery(mockValue, searchQuery, odataRequest);
        }
        else {
            return super.checkSearchQuery(mockValue, searchQuery, odataRequest);
        }
    }
    checkFilterValue(comparisonType, mockValue, literal, operator, odataRequest) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.checkFilterValue) {
            return this._mockDataFn.checkFilterValue(comparisonType, mockValue, literal, operator, odataRequest);
        }
        else {
            return super.checkFilterValue(comparisonType, mockValue, literal, operator, odataRequest);
        }
    }
}
exports.FunctionBasedMockData = FunctionBasedMockData;
//# sourceMappingURL=functionBasedMockData.js.map