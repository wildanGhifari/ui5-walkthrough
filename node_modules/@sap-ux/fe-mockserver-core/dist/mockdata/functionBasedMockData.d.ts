import type { KeyDefinitions } from './fileBasedMockData';
import { FileBasedMockData } from './fileBasedMockData';
import type { Action, EntityType, Property } from '@sap-ux/vocabularies-types';
import type { EntitySetInterface } from '../data/common';
import type ODataRequest from '../request/odataRequest';
export type MockDataContributor = {
    getInitialDataSet?: (contextId: string) => object[];
    addEntry?: (mockEntry: object, odataRequest: ODataRequest) => void;
    updateEntry?: (keyValues: KeyDefinitions, newData: object, updatedData: object, odataRequest: ODataRequest) => Promise<void>;
    removeEntry?: (keyValues: KeyDefinitions, odataRequest: ODataRequest) => void;
    hasEntry?: (keyValues: KeyDefinitions, odataRequest: ODataRequest) => boolean;
    hasEntries?: (odataRequest: ODataRequest) => boolean;
    fetchEntries?: (keyValues: KeyDefinitions, odataRequest: ODataRequest) => object[];
    getAllEntries?: (odataRequest: ODataRequest) => object[];
    getEmptyObject?: (odataRequest: ODataRequest) => object;
    getDefaultElement?: (odataRequest: ODataRequest) => object;
    generateKey?: (property: Property, lineIndex: number, odataRequest: ODataRequest) => any;
    checkSearchQuery?: (mockData: any, searchQuery: string, odataRequest: ODataRequest) => boolean;
    checkFilterValue?: (comparisonType: string, mockValue: any, literal: any, operator: string, odataRequest: ODataRequest) => boolean;
    onBeforeAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>, odataRequest: ODataRequest): Promise<object>;
    executeAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>, odataRequest: ODataRequest): Promise<object>;
    onAfterAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any, odataRequest: ODataRequest): Promise<any>;
    onAfterUpdateEntry?(keyValues: KeyDefinitions, updatedData: object, odataRequest: ODataRequest): Promise<void>;
    onBeforeUpdateEntry?(keyValues: KeyDefinitions, updatedData: object, odataRequest: ODataRequest): Promise<void>;
    hasCustomAggregate?(customAggregateName: string, odataRequest: ODataRequest): boolean;
    performCustomAggregate?(customAggregateName: string, dataToAggregate: any[], odataRequest: ODataRequest): any;
    throwError?(message: string, statusCode?: number, messageData?: object, isSAPMessage?: boolean, headers?: Record<string, string>): any;
    base?: {
        generateMockData: () => void;
        generateKey: (property: Property, lineIndex?: number, mockData?: any) => any;
        addEntry: (mockEntry: object, odataRequest: ODataRequest) => void;
        updateEntry: (keyValues: KeyDefinitions, newData: object, odataRequest: ODataRequest) => void;
        removeEntry: (keyValues: KeyDefinitions, odataRequest: ODataRequest) => void;
        hasEntry: (keyValues: KeyDefinitions, odataRequest: ODataRequest) => boolean;
        fetchEntries: (keyValues: KeyDefinitions, odataRequest: ODataRequest) => object[];
        hasEntries: (odataRequest: ODataRequest) => boolean;
        getAllEntries: (odataRequest: ODataRequest) => object[];
        getEmptyObject: (odataRequest: ODataRequest) => object;
        getDefaultElement: (odataRequest: ODataRequest) => object;
        getParentEntityInterface: () => Promise<FileBasedMockData | undefined>;
        getEntityInterface: (entityName: string) => Promise<FileBasedMockData | undefined>;
        checkSearchQuery: (mockData: any, searchQuery: string, odataRequest: ODataRequest) => boolean;
        checkFilterValue: (comparisonType: string, mockValue: any, literal: any, operator: string, odataRequest: ODataRequest) => boolean;
    };
};
/**
 *
 */
export declare class FunctionBasedMockData extends FileBasedMockData {
    private _mockDataFn;
    constructor(mockDataFn: MockDataContributor, entityType: EntityType, mockDataEntitySet: EntitySetInterface, contextId: string);
    addEntry(mockEntry: any, odataRequest: ODataRequest): Promise<void>;
    updateEntry(keyValues: KeyDefinitions, updatedData: object, patchData: object, odataRequest: ODataRequest): Promise<void>;
    removeEntry(keyValues: KeyDefinitions, odataRequest: ODataRequest): Promise<void>;
    fetchEntries(keyValues: KeyDefinitions, odataRequest: ODataRequest): object[];
    hasEntry(keyValues: KeyDefinitions, odataRequest: ODataRequest): boolean;
    hasEntries(odataRequest: ODataRequest): boolean;
    getEmptyObject(odataRequest: ODataRequest): object;
    getDefaultElement(odataRequest: ODataRequest): object;
    generateKey(property: Property, lineIndex: number, odataRequest: ODataRequest): any;
    getAllEntries(odataRequest: ODataRequest, dontClone?: boolean): object[];
    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, odataRequest: ODataRequest): Promise<object>;
    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, odataRequest: ODataRequest): Promise<object>;
    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any, odataRequest: ODataRequest): Promise<any>;
    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object, odataRequest: ODataRequest): Promise<void>;
    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object, odataRequest: ODataRequest): Promise<void>;
    hasCustomAggregate(customAggregateName: string, odataRequest: ODataRequest): boolean;
    performCustomAggregate(customAggregateName: string, dataToAggregate: any[], odataRequest: ODataRequest): any;
    checkSearchQuery(mockValue: any, searchQuery: string, odataRequest: ODataRequest): any;
    checkFilterValue(comparisonType: string, mockValue: any, literal: any, operator: string, odataRequest: ODataRequest): boolean;
}
//# sourceMappingURL=functionBasedMockData.d.ts.map